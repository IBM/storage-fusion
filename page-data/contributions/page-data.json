{
    "componentChunkName": "component---src-pages-contributions-mdx",
    "path": "/contributions/",
    "result": {"pageContext":{"frontmatter":{"description":"Instructions for developing and contributing to the theme","date":"27 January 2020","title":"Contributions"},"relativePagePath":"/contributions.mdx","titleType":"page","MdxNode":{"id":"40e6a366-0e0c-5b71-b011-de79a2d4d77f","children":[],"parent":"08d30ee6-48ba-5e42-81dc-9a7ccec79290","internal":{"content":"---\ndescription: Instructions for developing and contributing to the theme\ndate: 27 January 2020\n---\n\n<!-- Page title left out so it can be generated -->\n\n<PageDescription>\n\nUse this guide to contribute to the theme. We’ll show you how to get the\ndevelopment environment set up as quickly as possible so you can start\ncontributing.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Project setup</AnchorLink>\n  <AnchorLink>Development</AnchorLink>\n  <AnchorLink>Work in a branch</AnchorLink>\n  <AnchorLink>Sass and CSS Modules</AnchorLink>\n  <AnchorLink>VS Code</AnchorLink>\n  <AnchorLink>Test pages</AnchorLink>\n  <AnchorLink>Publishing</AnchorLink>\n</AnchorLinks>\n\n## Project setup\n\n1. Go to\n   [gatsby-theme-carbon](https://github.com/carbon-design-system/gatsby-theme-carbon)\n   and click the `Fork` button in the top-right corner.\n\n2. After it’s finished, click on the `Clone or Download` button and copy the\n   contents.\n\n3. In your terminal, clone the repo into your directory of choice\n\n```sh\ngit clone [PASTE_URL_HERE]\ncd gatsby-theme-carbon\n```\n\n4. When you clone your forked repo the `origin` is set to your fork by default.\n   You’ll want to add a remote that points to the upstream repo.\n\n```sh\ngit remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\n```\n\n5. In your terminal, verify that the remotes have been set\n\n```sh\ngit remote -v\n```\n\n## Development\n\nWe use [yarn](https://yarnpkg.com/lang/en/docs/install/) and yarn workspaces to\ndevelop the Carbon Gatsby theme. This allows us to have a development\nenvironment that’s closely linked to the theme with minimal setup. Run\n`yarn install` to install all of the projects dependencies.\n\nThis project has two packages: the actual theme package (`gatsby-theme-carbon`)\nand the `example` package. The example package emulates a project which uses the\ntheme. Its only dependencies are Gatsby, React, and the adjacent theme package.\nThe `example` package also serves as the theme’s documentation and\n[website](https://gatsby-theme-carbon.now.sh); it’s deployed on every merge to\nmain.\n\nNew theme development will happen in the theme package while documentation and\ntesting of that change will occur through changes in the example directory.\n\n### Development scripts\n\n- `yarn dev` – start the development environment\n- `yarn dev:clean` – clear cache and restart dev\n- `yarn format` – format your code with prettier\n- `yarn lint` - check for errors in your javascript\n- `yarn test:prefix` – build and serve with a path prefix\n\n## Work in a branch\n\nYou should always start a new project by pulling upstream changes into main and\nthen creating a new branch. This workflow ensures you don’t accidentally commit\nanything to your main branch and get stuck when trying to open a pull request.\n\n```sh\ngit checkout main\ngit pull upstream main\ngit checkout -b my-branch-name\n```\n\n### Commit messages\n\nFor commit messages we use\n[Angular commit conventions](https://gist.github.com/stephenparish/9941e89d80e2bc58a153#allowed-type)\nto dictate whether a commit is for a feature, fix, docs, etc. You need to prefix\nyour commits with one of the following:\n\n- feat (feature)\n- fix (bug fix)\n- docs (documentation)\n- style (formatting, missing semi colons, …)\n- refactor\n- test (when adding missing tests)\n- chore (maintain)\n\n```sh\ngit commit -m \"chore: this is a test commit message\"\n```\n\n### Opening a Pull request\n\nWhen you’re ready to open a pull request, push to your origin remote.\n\n```sh\ngit push origin my-branch-name\n```\n\nYou’ll get a message in your terminal with a URL to open up a pull request in\nthe upstream repository. Navigate to that URL and be sure to give a detailed\nsummary of your pull request in the title and body section of the form.\n\n## Sass and CSS Modules\n\nFor internal theme components we use\n[Sass](https://sass-lang.com/documentation/syntax) and\n[CSS Modules](https://github.com/css-modules/css-modules#css-modules). This\nallows us to take advantage of the Carbon Design System resources while not\nworrying about className collisions. By default, each `.scss` file will be\nsupplied with all of the Carbon Sass\n[variables](https://github.com/carbon-design-system/carbon/blob/main/packages/components/src/globals/scss/_vars.scss):\ncolor, spacing, theme, and motion, as well as type and layout mixins, are\nimported automatically.\n\nYou should colocate your stylesheet with the component(s) that import it. If the\ncomponent is `TreeView` then the stylesheet should be `TreeView.module.scss`.\nAll contained within the `TreeView` directory.\n\n### CSS Modules\n\nYou don’t need to prefix your classes as CSS Modules will generate unique class\nnames for you. Import the class from the `.scss` file.\n\n```scss path=TreeView.module.scss\n.treeView {\n  color: $text-01;\n}\n```\n\n```jsx path=TreeView.js\nimport { treeView } from './style.css';\n\nconst TreeView = (props) => <div className={treeView} />;\n```\n\nFor conditionally applying class names, use the `classname` library. Note how\nwe’re using a\n[computed property name](https://tylermcginnis.com/computed-property-names/) for\nthe property being based to `cx`. That’s because the className isn’t literally\n`\"long\"` it’s a value generated by CSS Modules and placed in the `long`\nvariable.\n\n```jsx path=TreeView.js\nimport cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = (props) => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = (props) => <div className={className} />;\n};\n```\n\nIf you need to target a global class not processed by CSS Modules, you can do so\nwith the\n[global selector](https://github.com/css-modules/css-modules#exceptions).\n\n```scss\n:global(.bx--grid) .codeBlock {\n  @include carbon--type-style('code-01');\n}\n```\n\n## VS Code\n\nTo get linting error feedback while writing javascript and SCSS in VS Code,\ninstall the\n[stylelint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint)\nand\n[ESlint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\nextensions. We use ESLint’s Prettier rules to format and lint all of our\nJavaScript in one pass. To get your code to format properly on save, add the\nfollowing to a `.vscode/settings.json` in the root of your project\n\n```json path=.vscode/settings.json\n{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}\n```\n\nTo lint the entire project and get errors in your `Problems` tray, you can add\nthe following to a `.vscode/tasks.json` file in the root of your project. You\ncan run these tasks with `cmd+shift+d`\n\n```json path=.vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n## Test pages\n\nIf you want to add examples of what you are working on or see changes you’ve\nmade, you can add an MDX file to `packages/src/pages/test` that will be visible\nat `(your-server-name)/test/(added-file)` during development. If you do add a\npage to the `/test` directory, update the below list with the file you added and\nits purpose to be included with your pull request.\n\n- [`Spacing audit`](/test/spacing-audit): use this page to test spacing around\n  components when combined in common patterns.\n\n## Publishing\n\n1. Pull the latest from the main branch, usually by running\n   `git pull upstream main` on your local machine.\n2. From the root of the package run `yarn release`.\n3. Follow the prompts accordingly.\n4. In the project’s\n   [release tab](https://github.com/carbon-design-system/gatsby-theme-carbon/releases),\n   edit the new release to include a summary of new changes.\n","type":"Mdx","contentDigest":"6141e2743235b0c36bf9fc01e310eeeb","owner":"gatsby-plugin-mdx","counter":177},"frontmatter":{"description":"Instructions for developing and contributing to the theme","date":"27 January 2020","title":"Contributions"},"exports":{},"rawBody":"---\ndescription: Instructions for developing and contributing to the theme\ndate: 27 January 2020\n---\n\n<!-- Page title left out so it can be generated -->\n\n<PageDescription>\n\nUse this guide to contribute to the theme. We’ll show you how to get the\ndevelopment environment set up as quickly as possible so you can start\ncontributing.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Project setup</AnchorLink>\n  <AnchorLink>Development</AnchorLink>\n  <AnchorLink>Work in a branch</AnchorLink>\n  <AnchorLink>Sass and CSS Modules</AnchorLink>\n  <AnchorLink>VS Code</AnchorLink>\n  <AnchorLink>Test pages</AnchorLink>\n  <AnchorLink>Publishing</AnchorLink>\n</AnchorLinks>\n\n## Project setup\n\n1. Go to\n   [gatsby-theme-carbon](https://github.com/carbon-design-system/gatsby-theme-carbon)\n   and click the `Fork` button in the top-right corner.\n\n2. After it’s finished, click on the `Clone or Download` button and copy the\n   contents.\n\n3. In your terminal, clone the repo into your directory of choice\n\n```sh\ngit clone [PASTE_URL_HERE]\ncd gatsby-theme-carbon\n```\n\n4. When you clone your forked repo the `origin` is set to your fork by default.\n   You’ll want to add a remote that points to the upstream repo.\n\n```sh\ngit remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\n```\n\n5. In your terminal, verify that the remotes have been set\n\n```sh\ngit remote -v\n```\n\n## Development\n\nWe use [yarn](https://yarnpkg.com/lang/en/docs/install/) and yarn workspaces to\ndevelop the Carbon Gatsby theme. This allows us to have a development\nenvironment that’s closely linked to the theme with minimal setup. Run\n`yarn install` to install all of the projects dependencies.\n\nThis project has two packages: the actual theme package (`gatsby-theme-carbon`)\nand the `example` package. The example package emulates a project which uses the\ntheme. Its only dependencies are Gatsby, React, and the adjacent theme package.\nThe `example` package also serves as the theme’s documentation and\n[website](https://gatsby-theme-carbon.now.sh); it’s deployed on every merge to\nmain.\n\nNew theme development will happen in the theme package while documentation and\ntesting of that change will occur through changes in the example directory.\n\n### Development scripts\n\n- `yarn dev` – start the development environment\n- `yarn dev:clean` – clear cache and restart dev\n- `yarn format` – format your code with prettier\n- `yarn lint` - check for errors in your javascript\n- `yarn test:prefix` – build and serve with a path prefix\n\n## Work in a branch\n\nYou should always start a new project by pulling upstream changes into main and\nthen creating a new branch. This workflow ensures you don’t accidentally commit\nanything to your main branch and get stuck when trying to open a pull request.\n\n```sh\ngit checkout main\ngit pull upstream main\ngit checkout -b my-branch-name\n```\n\n### Commit messages\n\nFor commit messages we use\n[Angular commit conventions](https://gist.github.com/stephenparish/9941e89d80e2bc58a153#allowed-type)\nto dictate whether a commit is for a feature, fix, docs, etc. You need to prefix\nyour commits with one of the following:\n\n- feat (feature)\n- fix (bug fix)\n- docs (documentation)\n- style (formatting, missing semi colons, …)\n- refactor\n- test (when adding missing tests)\n- chore (maintain)\n\n```sh\ngit commit -m \"chore: this is a test commit message\"\n```\n\n### Opening a Pull request\n\nWhen you’re ready to open a pull request, push to your origin remote.\n\n```sh\ngit push origin my-branch-name\n```\n\nYou’ll get a message in your terminal with a URL to open up a pull request in\nthe upstream repository. Navigate to that URL and be sure to give a detailed\nsummary of your pull request in the title and body section of the form.\n\n## Sass and CSS Modules\n\nFor internal theme components we use\n[Sass](https://sass-lang.com/documentation/syntax) and\n[CSS Modules](https://github.com/css-modules/css-modules#css-modules). This\nallows us to take advantage of the Carbon Design System resources while not\nworrying about className collisions. By default, each `.scss` file will be\nsupplied with all of the Carbon Sass\n[variables](https://github.com/carbon-design-system/carbon/blob/main/packages/components/src/globals/scss/_vars.scss):\ncolor, spacing, theme, and motion, as well as type and layout mixins, are\nimported automatically.\n\nYou should colocate your stylesheet with the component(s) that import it. If the\ncomponent is `TreeView` then the stylesheet should be `TreeView.module.scss`.\nAll contained within the `TreeView` directory.\n\n### CSS Modules\n\nYou don’t need to prefix your classes as CSS Modules will generate unique class\nnames for you. Import the class from the `.scss` file.\n\n```scss path=TreeView.module.scss\n.treeView {\n  color: $text-01;\n}\n```\n\n```jsx path=TreeView.js\nimport { treeView } from './style.css';\n\nconst TreeView = (props) => <div className={treeView} />;\n```\n\nFor conditionally applying class names, use the `classname` library. Note how\nwe’re using a\n[computed property name](https://tylermcginnis.com/computed-property-names/) for\nthe property being based to `cx`. That’s because the className isn’t literally\n`\"long\"` it’s a value generated by CSS Modules and placed in the `long`\nvariable.\n\n```jsx path=TreeView.js\nimport cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = (props) => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = (props) => <div className={className} />;\n};\n```\n\nIf you need to target a global class not processed by CSS Modules, you can do so\nwith the\n[global selector](https://github.com/css-modules/css-modules#exceptions).\n\n```scss\n:global(.bx--grid) .codeBlock {\n  @include carbon--type-style('code-01');\n}\n```\n\n## VS Code\n\nTo get linting error feedback while writing javascript and SCSS in VS Code,\ninstall the\n[stylelint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint)\nand\n[ESlint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\nextensions. We use ESLint’s Prettier rules to format and lint all of our\nJavaScript in one pass. To get your code to format properly on save, add the\nfollowing to a `.vscode/settings.json` in the root of your project\n\n```json path=.vscode/settings.json\n{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}\n```\n\nTo lint the entire project and get errors in your `Problems` tray, you can add\nthe following to a `.vscode/tasks.json` file in the root of your project. You\ncan run these tasks with `cmd+shift+d`\n\n```json path=.vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n## Test pages\n\nIf you want to add examples of what you are working on or see changes you’ve\nmade, you can add an MDX file to `packages/src/pages/test` that will be visible\nat `(your-server-name)/test/(added-file)` during development. If you do add a\npage to the `/test` directory, update the below list with the file you added and\nits purpose to be included with your pull request.\n\n- [`Spacing audit`](/test/spacing-audit): use this page to test spacing around\n  components when combined in common patterns.\n\n## Publishing\n\n1. Pull the latest from the main branch, usually by running\n   `git pull upstream main` on your local machine.\n2. From the root of the package run `yarn release`.\n3. Follow the prompts accordingly.\n4. In the project’s\n   [release tab](https://github.com/carbon-design-system/gatsby-theme-carbon/releases),\n   edit the new release to include a summary of new changes.\n","fileAbsolutePath":"/Users/benrandall/Documents/Code/ibm-fusion/src/pages/contributions.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","2881613939","3037994772","768070550"]}