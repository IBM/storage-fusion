apiVersion: v1
kind: Service
metadata:
  name: fusion-collab
  labels:
    app: fusion-collab
    tier: frontend
spec:
  ports:
    - port: 80
  selector:
    app: fusion-collab
    tier: frontend
  type: LoadBalancer
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: fusion-collab
    tier: frontend
  name: fusion-collab
spec:
  host: kustomize
  port:
    targetPort: 80
  to:
    kind: Service
    name: fusion-collab
    weight: 100
  wildcardPolicy: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  labels:
    app: fusion-collab
    tier: frontend
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: kustomize
  volumeMode: Filesystem
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fusion-collab
  labels:
    app: fusion-collab
    tier: frontend
spec:
  selector:
    matchLabels:
      app: fusion-collab
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: fusion-collab
        tier: frontend
    spec:
      securityContext:
        sysctls:
          - name: net.ipv4.ip_unprivileged_port_start
            value: "0"
      containers:
      - image: wordpress:6.8.1-apache
        name: fusion-collab
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: WORDPRESS_DB_USER
          value: wordpress
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: spp-data-protection.isf.ibm.com/v1alpha1
kind: Recipe
metadata:
  name: fusion-collab-bnr-recipe
spec:
  appType: fusion-collab
  groups:
    - name: fusion-collab-volumes
      type: volume
    - name: fusion-collab-resources
      excludedResourceTypes:
      - events
      - event.events.k8s.io
      - replicaset
      - pods
      type: resource
  hooks:
  - name: mysql-pod-exec
    type: exec
    namespace: ${GROUP.fusion-collab-volumes.namespace}
    labelSelector: tier=mysql
    timeout: 60
    onError: fail
    ops:
      - name: "flush-tables-with-read-lock"
        command: >
            ["/bin/bash", "-c", "mysql --user=root --password=$MYSQL_ROOT_PASSWORD -e 'FLUSH TABLES WITH READ LOCK;'"]
        container: mysql
  - name: fusion-collab-deployment-check
    type: check
    namespace: ${GROUP.fusion-collab-volumes.namespace}
    labelSelector: tier=frontend
    selectResource: deployment
    timeout: 120
    onError: fail
    chks:
    - name: replicasReady
      timeout: 120
      onError: fail
      condition: "{$.spec.replicas} == {$.status.readyReplicas}"
  - name: mysql-deployment-check
    type: check
    namespace: ${GROUP.fusion-collab-volumes.namespace}
    labelSelector: tier=mysql
    selectResource: deployment
    timeout: 120
    onError: fail
    chks:
    - name: replicasReady
      timeout: 120
      onError: fail
      condition: "{$.spec.replicas} == {$.status.readyReplicas}"
  workflows:
    - name: backup
      sequence:
        - group: fusion-collab-resources
        - hook: mysql-pod-exec/flush-tables-with-read-lock
        - group: fusion-collab-volumes
    - name: restore
      sequence:
        - group: fusion-collab-volumes
        - group: fusion-collab-resources
        - hook: fusion-collab-deployment-check/replicasReady
        - hook: mysql-deployment-check/replicasReady
